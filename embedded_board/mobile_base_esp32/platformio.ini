; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:esp32-s3-devkitm-1]
platform = espressif32
board = esp32-s3-devkitc-1
# board = esp32-c6-devkitm-1
framework = arduino
; -I include: tells it to include the ros_message_types header we have in the /include folder
; -DUSER_TYPE_FILE: gets used in a pico-ros cmake macro to build the custom types
;    see https://github.com/Pico-ROS/Pico-ROS-software/blob/a62a46efde433d6e934d1a52a049e01b631f8b58/src/picoserdes.h#L94-L95
build_flags =
#    -DZENOH_C_STANDARD=99:
#    -DZ_BATCH_SIZE_TX=1500
#    -DZ_BATCH_UNICAST_SIZE=2048
    -DZENOH_COMPILER_GCC
    -DZENOH_ARDUINO_ESP32  ; this was required to build Pico-ROS against Zenoh
board_build.cmake_extra_args=
    -DZ_FEATURE_LINK_SERIAL=1
monitor_speed = 115200
monitor_port = /dev/ttyACM0
; monitor_rts = 0
; monitor_dtr = 0
lib_deps =
    http://github.com/eclipse-zenoh/zenoh-pico
#    ; clone the following repos yourself in the .pio/libdeps directory:
#    ; https://github.com/Pico-ROS/Pico-ROS-software.git
#    ; https://github.com/eProsima/Micro-CDR


#### project size with serial link turned off
# Advanced Memory Usage is available via "PlatformIO Home > Project Inspect"
# RAM:   [=         ]   6.9% (used 22584 bytes from 327680 bytes)
# Flash: [=         ]  12.5% (used 417561 bytes from 3342336 bytes)
# Building .pio/build/esp32-s3-devkitm-1/firmware.bin
